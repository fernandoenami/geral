//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFConsoleClient.MathService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathService.IMyMathService")]
    public interface IMyMathService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/Add", ReplyAction="http://tempuri.org/IMyMathService/AddResponse")]
        double Add(double dblNum1, double dblNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/Add", ReplyAction="http://tempuri.org/IMyMathService/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double dblNum1, double dblNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/Subtract", ReplyAction="http://tempuri.org/IMyMathService/SubtractResponse")]
        double Subtract(double dblNum1, double dblNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/Subtract", ReplyAction="http://tempuri.org/IMyMathService/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(double dblNum1, double dblNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/Multiply", ReplyAction="http://tempuri.org/IMyMathService/MultiplyResponse")]
        double Multiply(double dblNum1, double dblNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/Multiply", ReplyAction="http://tempuri.org/IMyMathService/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double dblNum1, double dblNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/Divide", ReplyAction="http://tempuri.org/IMyMathService/DivideResponse")]
        double Divide(double dblNum1, double dblNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/Divide", ReplyAction="http://tempuri.org/IMyMathService/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double dblNum1, double dblNum2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/Operation", ReplyAction="http://tempuri.org/IMyMathService/OperationResponse")]
        double Operation(string op, string n1, string n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/Operation", ReplyAction="http://tempuri.org/IMyMathService/OperationResponse")]
        System.Threading.Tasks.Task<double> OperationAsync(string op, string n1, string n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/GetValue", ReplyAction="http://tempuri.org/IMyMathService/GetValueResponse")]
        string GetValue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyMathService/GetValue", ReplyAction="http://tempuri.org/IMyMathService/GetValueResponse")]
        System.Threading.Tasks.Task<string> GetValueAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyMathServiceChannel : WCFConsoleClient.MathService.IMyMathService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyMathServiceClient : System.ServiceModel.ClientBase<WCFConsoleClient.MathService.IMyMathService>, WCFConsoleClient.MathService.IMyMathService {
        
        public MyMathServiceClient() {
        }
        
        public MyMathServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyMathServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyMathServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyMathServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double dblNum1, double dblNum2) {
            return base.Channel.Add(dblNum1, dblNum2);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double dblNum1, double dblNum2) {
            return base.Channel.AddAsync(dblNum1, dblNum2);
        }
        
        public double Subtract(double dblNum1, double dblNum2) {
            return base.Channel.Subtract(dblNum1, dblNum2);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(double dblNum1, double dblNum2) {
            return base.Channel.SubtractAsync(dblNum1, dblNum2);
        }
        
        public double Multiply(double dblNum1, double dblNum2) {
            return base.Channel.Multiply(dblNum1, dblNum2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double dblNum1, double dblNum2) {
            return base.Channel.MultiplyAsync(dblNum1, dblNum2);
        }
        
        public double Divide(double dblNum1, double dblNum2) {
            return base.Channel.Divide(dblNum1, dblNum2);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double dblNum1, double dblNum2) {
            return base.Channel.DivideAsync(dblNum1, dblNum2);
        }
        
        public double Operation(string op, string n1, string n2) {
            return base.Channel.Operation(op, n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> OperationAsync(string op, string n1, string n2) {
            return base.Channel.OperationAsync(op, n1, n2);
        }
        
        public string GetValue() {
            return base.Channel.GetValue();
        }
        
        public System.Threading.Tasks.Task<string> GetValueAsync() {
            return base.Channel.GetValueAsync();
        }
    }
}
